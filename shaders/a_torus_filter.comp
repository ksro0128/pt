#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, rgba32f) uniform readonly image2D inputImage;
layout(binding = 1, rgba32f) uniform writeonly image2D outputImage;

layout(push_constant) uniform PushConsts {
    int stepSize;
} pc;

const int kernelRadius = 2;

const float kernel[5][5] = float[5][5](
    float[5](1, 2, 3, 2, 1),
    float[5](2, 4, 6, 4, 2),
    float[5](3, 6, 9, 6, 3),
    float[5](2, 4, 6, 4, 2),
    float[5](1, 2, 3, 2, 1)
);

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(inputImage);

    vec3 accum = vec3(0.0);
    float totalWeight = 0.0;

    for (int dy = -kernelRadius; dy <= kernelRadius; ++dy) {
        for (int dx = -kernelRadius; dx <= kernelRadius; ++dx) {
            ivec2 offset = ivec2(dx, dy) * pc.stepSize;

            ivec2 sampleCoord = clamp(coord + offset, ivec2(0), imageSize - 1);

            vec3 pixelColor = imageLoad(inputImage, sampleCoord).rgb;
            float w = kernel[dy + kernelRadius][dx + kernelRadius];

            accum += pixelColor * w;
            totalWeight += w;
        }
    }

    vec3 filtered = (totalWeight > 0.0) ? (accum / totalWeight) : vec3(0.0);
    imageStore(outputImage, coord, vec4(filtered, 1.0));
}
