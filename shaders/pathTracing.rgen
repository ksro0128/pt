#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

float rand(inout uint seed) {
    seed ^= seed << 13;
    seed ^= seed >> 17;
    seed ^= seed << 5;
    return float(seed) / 4294967296.0;
}

uint tea(in uint val0, in uint val1)
{
  uint v0 = val0;
  uint v1 = val1;
  uint s0 = 0;

  for(uint n = 0; n < 16; n++)
  {
    s0 += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
  }

  return v0;
}

uint initRandom(in uvec2 resolution, in uvec2 screenCoord, in uint frame)
{
  return tea(screenCoord.y * resolution.x + screenCoord.x, frame);
}

float luminance(vec3 x) {
	return dot(x, vec3(0.2126, 0.7152, 0.0722));
}

const vec2 JITTER_SEQ[16] = vec2[16](
    vec2(0.5,     0.3333),  // Halton(1)
    vec2(0.25,    0.6667),  // Halton(2)
    vec2(0.75,    0.1111),  // Halton(3)
    vec2(0.125,   0.4444),  // Halton(4)
    vec2(0.625,   0.7778),  // Halton(5)
    vec2(0.375,   0.2222),  // Halton(6)
    vec2(0.875,   0.5556),  // Halton(7)
    vec2(0.0625,  0.8889),  // Halton(8)
    vec2(0.5625,  0.0370),  // Halton(9)
    vec2(0.3125,  0.3704),  // Halton(10)
    vec2(0.8125,  0.7037),  // Halton(11)
    vec2(0.1875,  0.1481),  // Halton(12)
    vec2(0.6875,  0.4815),  // Halton(13)
    vec2(0.4375,  0.8148),  // Halton(14)
    vec2(0.9375,  0.2593),  // Halton(15)
    vec2(0.03125, 0.5926)   // Halton(16)
);


struct RayPayload {
    vec3 L;
    vec3 beta;
	vec3 nextOrigin;
	vec3 nextDir;
	int bounce;
	uint seed;
	int terminated;
    float pdf;
};

layout(location = 0) rayPayloadEXT RayPayload payload;


layout(set = 0, binding = 0) uniform CameraGPU {
    vec3 camPos;
	float pad0;
    vec3 camDir;
	float pad1;
    vec3 camUp;
	float pad2;
    vec3 camRight;
    float fovY;
} camera;

layout(set = 0, binding = 1) uniform OptionsGPU {
    int frameCount;
    int maxSpp;
    int currentSpp;
	int lightCount;
} options;

layout(set = 4, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 5, binding = 0, rgba32f) uniform image2D outputImage;
layout(set = 5, binding = 1, rgba32f) uniform image2D accumPrevImage;
layout(set = 5, binding = 2, rgba32f) uniform image2D accumCurImage;

void main() {

	if (options.currentSpp >= options.maxSpp) {
		return;
	}


    uvec2 pixel = gl_LaunchIDEXT.xy;
    uvec2 size = gl_LaunchSizeEXT.xy;
    
	// vec2 uv = (vec2(pixel) + vec2(0.5)) / vec2(size);

    uint seed = initRandom(size, pixel, options.frameCount);
	vec2 jitter = vec2(rand(seed), rand(seed));
	vec2 uv = (vec2(pixel) + jitter) / vec2(size);

    vec2 screen = uv * 2.0 - 1.0;
    screen.y = -screen.y;
    float aspect = float(size.x) / float(size.y);
    float scale = tan(radians(camera.fovY) * 0.5);

    vec3 dir = normalize(
        screen.x * aspect * scale * camera.camRight +
        screen.y * scale * camera.camUp +
        camera.camDir
    );
	vec3 origin = camera.camPos;


	payload.L = vec3(0.0);
	payload.beta = vec3(1.0);
	payload.nextOrigin = origin;
	payload.nextDir = dir;
	payload.bounce = 0;
	payload.seed = initRandom(size, pixel, options.frameCount);
	payload.terminated = 0;


	for (int i = 0; i < 16; ++i) {
		payload.bounce = i;
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0,
					origin, 0.0001, dir, 1e30, 0);
		
		if (payload.terminated != 0) break;

		if (i > 2) {
			float p = clamp(max(payload.beta.r, max(payload.beta.g, payload.beta.b)), 0.05, 1.0);
			if (rand(payload.seed) > p) {
				break;
			}
			payload.beta /= p;
		}

		origin = payload.nextOrigin;
		dir = payload.nextDir;
	}

	ivec2 ipixel = ivec2(pixel);

	// 누적 버퍼
	vec4 prevAccum = vec4(0.0);
	if (options.currentSpp > 0) {
		prevAccum = imageLoad(accumPrevImage, ipixel);
	}
	vec4 newAccum = prevAccum + vec4(payload.L, 1.0);
	imageStore(accumCurImage, ipixel, newAccum);

	// 현재 샘플 수로 정규화된 출력
	vec3 finalColor = newAccum.rgb / (float(options.currentSpp) + 1.0f);
	imageStore(outputImage, ipixel, vec4(finalColor, 1.0));

}