#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

layout(set = 0, binding = 0) uniform CameraBuffer {
    mat4 view;
    mat4 proj;
    vec3 camPos;
	int frameCount;
} camera;

layout(set = 0, binding = 2) uniform RenderOptions {
    int useRTReflection;
    int rtMode;
    vec2 pad;
} renderOptions;

layout(set = 1, binding = 0, rgba16f) uniform image2D outputImage;
layout(set = 1, binding = 1) uniform accelerationStructureEXT topLevelAS;

layout(set = 4, binding = 0) uniform sampler2D gPosition;
layout(set = 4, binding = 1) uniform sampler2D gNormal;
layout(set = 4, binding = 2) uniform sampler2D gAlbedo;
layout(set = 4, binding = 3) uniform sampler2D gPBR;

struct RayPayload {
    vec3 color;
    int bounce;
};

layout(location = 0) rayPayloadEXT RayPayload payload;


float hash1(vec2 p) {
    p = fract(p * vec2(123.34, 345.45));
    p += dot(p, p + 34.345);
    return fract(p.x * p.y);
}

float vdcSequence(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 hammersleySequence(uint i, uint N)
{
    return vec2(float(i) / float(N), vdcSequence(i));
}

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
	
    float phi = 2.0 * 3.1415926535 * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha2 - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float distributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    float denominator = (NdotH2 * (a2 - 1.0) + 1.0);
    return a2 / (3.14159265359 * denominator * denominator);
}

float ggxPdf(vec3 N, vec3 H, vec3 V, float roughness) {
    float D = distributionGGX(N, H, roughness);
    float NdotH = max(dot(N, H), 0.0);
    float VdotH = max(dot(V, H), 0.0);
    return D * NdotH / (4.0 * VdotH + 1e-5); // pdf = D(h) * (N⋅H) / (4 * (V⋅H))
}

// Fresnel-Schlick Approximation
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

// Geometry Function
float geometrySchlickGGX(float NdotV, float roughness) {
    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    return geometrySchlickGGX(NdotV, roughness) * geometrySchlickGGX(NdotL, roughness);
}

void main() {
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 resolution = vec2(gl_LaunchSizeEXT.xy);
    vec2 uv = pixelCenter / resolution;

    vec3 worldPos = texture(gPosition, uv).xyz;
    vec3 worldNormal = normalize(texture(gNormal, uv).xyz);
    vec3 albedo      = texture(gAlbedo,   uv).rgb;
    vec3 pbr         = texture(gPBR,      uv).rgb;
    float ao        = pbr.r;
    float roughness = pbr.g;
    float metallic  = pbr.b;
    vec3 viewDir = normalize(camera.camPos - worldPos);

    payload.color = vec3(0.0);
    
    int sampleCount = 1;
    vec3 accumulatedColor = vec3(0.0);
    int validSamples = 0;


    float accumulatedWeight = 0.0;
    vec3 sampleDir = vec3(0.0);

    if (roughness < 0.04) {
        roughness = 0.04;
    }

    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    for (int i = 0; i < sampleCount; ++i) {
        vec2 Xi = hammersleySequence(i, sampleCount);
        vec3 H = importanceSampleGGX(Xi, worldNormal, roughness);
        vec3 L = normalize(reflect(-viewDir, H));
        if (dot(worldNormal, L) <= 0.0) {
            continue;
        }

        float pdf = ggxPdf(worldNormal, H, viewDir, roughness);
        if (pdf < 1e-5) {
            continue;
        }

        payload.color = vec3(0.0);
        payload.bounce = 1;

        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
        0xFF, 0,0,0, worldPos + L * 0.05, 0.001, L, 1e4, 0);

        vec3 Li = payload.color;

        float NoV = max(dot(worldNormal, viewDir), 1e-3);
        float NoL = max(dot(worldNormal, L),      1e-3);
        vec3  F   = fresnelSchlick(max(dot(H, viewDir),0.0), F0);
        float NDF = distributionGGX(worldNormal, H, roughness);
        float G   = geometrySmith(worldNormal, viewDir, L, roughness);

        vec3 brdfWeight = (NDF * G * F) / (4.0 * NoV * NoL + 1e-5);

        accumulatedColor += brdfWeight * Li * NoL / pdf;
        ++validSamples;
    }

    if (validSamples == 0) {
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 1.0));
        return;
    }
    vec3 outCol = accumulatedColor / float(validSamples);
    // imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(outCol, 1.0));
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 1.0));
}
